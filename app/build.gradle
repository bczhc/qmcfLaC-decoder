import pers.zhc.plugins.BuildUtils
import pers.zhc.plugins.BuildUtils2
import pers.zhc.plugins.NdkVersion
import pers.zhc.plugins.SdkPath
import pers.zhc.tools.plugin.rust.RustBuildPlugin
import pers.zhc.tools.plugin.util.FileUtils

import java.nio.charset.StandardCharsets

apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: RustBuildPlugin

def commitLogResult = null
def base64Encoder = Base64.encoder
try {
    def gitVersion = BuildUtils2.checkGitVersion()
    println "Found git $gitVersion"

    try {
        def log = BuildUtils2.getGitCommitLog(projectDir)
        println "git log string size: ${log.bytes.length}"
        if (log.isEmpty()) {
            commitLogResult = base64Encoder.encodeToString("Unknown".bytes)
        } else {
            commitLogResult = base64Encoder.encodeToString(log.getBytes(StandardCharsets.UTF_8))
        }
    } catch (e) {
        throw new GradleException("Execution failed", e)
    }
} catch (e) {
    if (e instanceof GradleException) {
        throw e
    }
    println "Found git error: ${e.toString()}; disable git commit log injection"
    commitLogResult = base64Encoder.encodeToString("Unknown".bytes)
}

android {
    signingConfigs {
        debug {
            storeFile file('test.jks')
            storePassword '123456'
            keyAlias 'key0'
            keyPassword '123456'
        }
        release {
            storeFile file('test.jks')
            storePassword '123456'
            keyPassword '123456'
            keyAlias 'key0'
        }
    }
    compileSdkVersion 31
    defaultConfig {
        applicationId "pers.zhc.tools"
        minSdkVersion 21
        targetSdkVersion 31
        def verInfo = BuildUtils.gVersion()
        versionCode(verInfo[0] as int)
        versionName(verInfo[1] as String)
        ndk {
            abiFilters "arm64-v8a"
        }
        buildConfigField 'String[]', 'commitLogEncodedSplit', BuildUtils2.longStringToStringArray(commitLogResult, 100)
    }
    buildTypes {
        debug {
            //noinspection GroovyAssignabilityCheck
            minifyEnabled false
            shrinkResources false
            proguardFiles 'proguard-rules-debug.pro'
        }
        release {
            //noinspection GroovyAssignabilityCheck
            minifyEnabled true
            shrinkResources true
            proguardFiles 'proguard-rules.pro'
            signingConfig signingConfigs.debug
            debuggable true
            jniDebuggable true
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    lintOptions {
        checkReleaseBuilds false
        abortOnError false
    }

    def foundSdkDir
    try {
        foundSdkDir = new File(SdkPath.getSdkPath(project))
    } catch (FileNotFoundException ignored) {
        throw new GradleException("Cannot found sdk path. Please define \"sdk.dir\" in the project \"local.properties\"")
    }
    def detectedNdkVersion = NdkVersion.getLatestNdkVersion(foundSdkDir)
    if (detectedNdkVersion == null) {
        detectedNdkVersion = NdkVersion.readLocalProperties(project)
    }
    if (detectedNdkVersion == null) {
        throw new GradleException("Cannot get NDK version. Please check NDK directory \"\$SDK/ndk/\" " +
                "or try to define \"ndk.version\" in the project \"local.properties\"")
    }

    ndkVersion = detectedNdkVersion
    def sdkDir = android.sdkDirectory as File
    def ndkDir = android.ndkDirectory as File
    println """Build environment info:
SDK path: ${sdkDir.path}
NDK path: ${ndkDir.path}"""

    def list = [ndkDir, sdkDir]
    def tools = BuildUtils.Tools.newInstance(list as Object[])
    detectedNdkVersion = tools.getNdkVersion()
    externalNativeBuild {
        cmake {
            version tools.getCMakeVersion()
            println("CMake Version: ${getVersion()}")
            path file('src/main/cpp/CMakeLists.txt')
        }
    }

    sourceSets {
        main {
            jniLibs.srcDirs = ['jniLibs']
        }
    }
}

def appProject = project
def jniOutputDir = new File(appProject.projectDir, "jniLibs")

def opensslDir = BuildUtils.getOpensslDir(new File(rootDir, "config.properties"))
def jniTargetAbi = "arm64-v8a"

rustBuild {
    androidNdkDir = android.ndkDirectory.path
    androidApi = 29
    targetAbi = jniTargetAbi
    buildType = "release"
    rustProjectDir = new File(appProject.projectDir, "src/main/rust").path
    outputDir = jniOutputDir.path
    extraEnv = [
            "OPENSSL_DIR": opensslDir.path
    ]
}

def copyOpensslLibsTask = project.task("copyOpensslLibs") {
    doLast {
        ["libssl.so", "libcrypto.so"].stream().map {
            new File(new File(opensslDir, "lib"), it)
        }.forEach {
            if (!it.exists()) {
                throw new GradleException("Required OpenSSL library file not found: $it.path")
            }
            def dir = new File(jniOutputDir, jniTargetAbi.toString())
            dir.mkdirs()
            FileUtils.copyFile(it, new File(dir, it.name))
        }
    }
}

def compileReleaseRustTask = appProject.tasks.getByName(RustBuildPlugin.TASK_NAME())
appProject.tasks.getByName("preBuild").dependsOn(compileReleaseRustTask)
compileReleaseRustTask.dependsOn(copyOpensslLibsTask)

repositories {
    mavenCentral()
    google()
    maven { url 'https://jitpack.io' }
}

dependencies {
    implementation 'androidx.appcompat:appcompat:1.4.1'
    implementation 'org.mariuszgromada.math:MathParser.org-mXparser:4.4.2'
    implementation "org.jetbrains.kotlin:kotlin-stdlib:1.6.10"
    implementation 'com.google.android.material:material:1.5.0'
    implementation 'com.github.mik3y:usb-serial-for-android:3.3.0'
    implementation 'com.github.bczhc:java-lib:18a858c167'
    implementation 'androidx.navigation:navigation-fragment-ktx:2.4.0'
    implementation 'androidx.navigation:navigation-ui-ktx:2.4.0'
    implementation 'me.zhanghai.android.fastscroll:library:1.1.7'
    implementation 'com.github.bczhc:jni-java:3a74b3d640'
}

project.task("showNdkPath") {
    doLast {
        println android.ndkDirectory.path
    }
}

project.task("saveNdkPath") {
    doLast {
        String path = android.ndkDirectory.path
        def writer = new File("./ndk-path").newWriter("UTF-8")
        writer.write(path)
        writer.close()
    }
}
