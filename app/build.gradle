import pers.zhc.plugins.BuildUtils
import pers.zhc.plugins.MyPlugin2
import pers.zhc.plugins.Utils

apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'jacoco-android'
apply plugin: MyPlugin2

android {
    signingConfigs {
        debug {
            storeFile file('test.jks')
            storePassword '123456'
            keyAlias 'key0'
            keyPassword '123456'
        }
        release {
            storeFile file('test.jks')
            storePassword '123456'
            keyPassword '123456'
            keyAlias 'key0'
        }
    }
    compileSdkVersion 29
    defaultConfig {
        applicationId "pers.zhc.tools"
        minSdkVersion 14
        targetSdkVersion 29
        def verInfo = BuildUtils.gVersion()
        versionCode(verInfo[0] as int)
        versionName(verInfo[1] as String)
        ndk {
            abiFilters "arm64-v8a"
        }
        flavorDimensions '1'
    }
    buildTypes {
        debug {
            //noinspection GroovyAssignabilityCheck
            minifyEnabled false
            shrinkResources false
            proguardFiles 'proguard-rules-debug.pro'
            testCoverageEnabled true
        }
        release {
            //noinspection GroovyAssignabilityCheck
            minifyEnabled true
            shrinkResources true
            proguardFiles 'proguard-rules.pro'
            signingConfig signingConfigs.debug
            debuggable true
            jniDebuggable true
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
        return true
    }
    lintOptions {
        checkReleaseBuilds false
        abortOnError false
        return true
    }
    def tools = BuildUtils.Tools.newInstance([android.ndkDirectory, android.sdkDirectory] as Object[])
    ndkVersion = tools.getNdkVersion()
    println("Ndk Version: ${ndkVersion}")
    externalNativeBuild {
        cmake {
            version tools.getCMakeVersion()
            println("CMake Version: ${getVersion()}")
            setPath(file('src/main/jni/cpp/CMakeLists.txt'))
        }
    }
    return true
}

jacoco {
    toolVersion = "0.8.4"
}

tasks.withType(Test) {
    jacoco.includeNoLocationClasses = true
}

evaluationDependsOnChildren()

dependencies {
    implementation 'androidx.legacy:legacy-support-v4:1.0.0'
    implementation 'org.mariuszgromada.math:MathParser.org-mXparser:4.3.3'
    implementation "org.jetbrains.kotlin:kotlin-stdlib:1.4.10"

    //my java-dep jar
    def jarProperties = Utils.getJarSrcAndTargetLocation(project)
    println jarProperties
    implementation files(jarProperties[1].path)
}

afterEvaluate {
    tasks.named("build").get().dependsOn("buildJavaDepJar")
}